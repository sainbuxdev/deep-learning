# -*- coding: utf-8 -*-
"""HyperParameter-Tuning-BreastCancer-KFold-ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FN220NOeIWCWMVYEge7ag8TSWCloSM2j
"""

import pandas as pd
data = pd.read_csv("wdbc.data", delimiter=',', header = None)

y = data[1]
x = data.drop(columns=[1])

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_val_score

encoder = LabelEncoder()
scale = StandardScaler()
y = encoder.fit_transform(y)
x = scale.fit_transform(x)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)

import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier

def built_Classifier(optimizer='adam'):
    model = Sequential()
    model.add(Dense(16, activation='relu',input_dim=31))
    model.add(Dense(16, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

classifier = KerasClassifier(build_fn=built_Classifier)
parameter = {'batch_size':[100,200], 'epochs':[100,150], 'optimizer':['adam','rmsgrp']}
grid_search = GridSearchCV(estimator=classifier, param_grid = parameter, scoring = 'accuracy', cv=10)

grid_search.fit(x_train, y_train)
best_parameter = grid_search.best_params_
best_score = grid_search.best_score_

best_parameter

best_score

